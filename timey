#!/bin/sh

#
# Simple time tracking tool. Logs task start and end times in ~/.timelog. The
# file format is known as "timeclock"
#
# Author: Dan Turner
#

# Flags for safer shell-scripting.
set -euf

CURRENT_DATE=$(date "+%F %T")
COMMAND="$1"
TIMELOG="${HOME}/.timelog"
shift # Ignore the command once we've grabbed it. 

# Mark us as "in" a task.
timey_in() {
  # If we're already in a task, complain.
  LAST_LOG_LINE=$(tail -n 1 "${TIMELOG}" | cut -d ' ' -f 1)
  case "${LAST_LOG_LINE}" in
    [!o]) printf "Cannot start timing, still in a task.\n"; exit 1;;
  esac 
  CATEGORY="$1"
  printf "i %s %s\n" "${CURRENT_DATE}" "${CATEGORY}" >> "${TIMELOG}"
}
  
# Mark the user as out of a task.
timey_out() {
  # Determine if we're in a task already.
  LAST_LOG_LINE=$(tail -n 1 "${TIMELOG}" | cut -d ' ' -f 1)
  case "${LAST_LOG_LINE}" in
    [!i]) printf "Cannot clock out, not in a task.\n"; exit 1;;
  esac 
  printf "o %s\n" "${CURRENT_DATE}" >> "${TIMELOG}"
}

# Show our current hours today.
timey_hours() {
  ledger --time-colon --file "${TIMELOG}" bal -p "since today";
}

# Switch the user's task.
timey_interruption() {
  # Determine if we're in a task already.
  LAST_LOG_LINE=$(tail -n 1 "${TIMELOG}" | cut -d ' ' -f 1)
  case "${LAST_LOG_LINE}" in
    [!i]) printf "Cannot log interruption, not in a task.\n"; exit 1;;
  esac 

  # Get the last task we were working on.
  LAST_PROJECT=$(grep '^i' "${TIMELOG}" | tail -n 1 | cut -d ' ' -f 4)

  # Stop the current task.
  timey_out

  # Read an interruption.
  read -p "Interruption category [interruption]? " INTERRUPTION_CATEGORY
  if [ -z "${INTERRUPTION_CATEGORY}" ]
  then
    INTERRUPTION_CATEGORY="interruption"
  fi
  timey_in "${INTERRUPTION_CATEGORY}"
  CURRENT_DATE=$(date "+%F %T")
  timey_out;

  # Restored us to the previous task.
  timey_in "${LAST_PROJECT}"
  printf "Back on task %s\n" "${LAST_PROJECT}"

  # We must force exit, if we try to continue past this point, we've 
  # re-used CURRENT_DATE and it not longer represents the time at program
  # start.
  exit 0;
}
  
# Periodically monitor time usage.
timey_monitor() {
  while true
  do
      DATE=$(date +"%F %T")
      DASHES="--------------------"
      printf "%s  %s\n" "${DASHES}" "${DATE}"
      timey_hours
      printf "\n"
      sleep 300
  done
}

# List all of the tasks matching the given pattern
timey_tasks() {
  cat "${TIMELOG}" | cut -d' ' -f 4 | sort | uniq | grep "$1" 
}


case "${COMMAND}" in
  in) timey_in "$1" ;;
  out) timey_out ;;
  hours) timey_hours ;;
  int) timey_interruption ;;
  monitor) timey_monitor ;;
  tasks) timey_tasks "$1" ;;
  *) printf "Uh-oh!"; exit 1;;
esac

